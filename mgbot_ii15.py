import asyncio
import json
import os
import re
from datetime import datetime, timedelta
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from bs4 import BeautifulSoup
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo

# ------------------ –ó–ê–ì–†–£–ó–ö–ê .ENV ------------------
load_dotenv()

# ------------------ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ù–ê–°–¢–†–û–ô–ö–ò ------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
CACHE_FILE = "doctors_cache.json"
CACHE_EXPIRE_HOURS = 3
MAX_DOCTORS = 5
LOG_FILE = "logs.txt"

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ .env")
if not YANDEX_FOLDER_ID:
    raise ValueError("‚ùå YANDEX_FOLDER_ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ .env")
if not YANDEX_API_KEY:
    raise ValueError("‚ùå YANDEX_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ .env")

# ------------------ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def log_interaction(user: types.User, user_input: str, bot_response: str):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ñ–∞–π–ª"""
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] "
                f"{user.full_name} (id={user.id})\n"
                f"  ‚û§ –ó–∞–ø—Ä–æ—Å: {user_input}\n"
                f"  ‚û§ –û—Ç–≤–µ—Ç: {bot_response}\n\n")

# ------------------ –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ò –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò ------------------
SPECIALIZATIONS = {
    "–ì–∏–Ω–µ–∫–æ–ª–æ–≥": "ginekolog",
    "–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥": "oftalmolog",
    "–í—Ä–∞—á –£–ó–ò": "ultrazvukovoy-diagnost",
    "–ú–∞–º–º–æ–ª–æ–≥": "mammolog",
    "–£—Ä–æ–ª–æ–≥": "urolog",
    "–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥": "endokrinolog",
    "–¢–µ—Ä–∞–ø–µ–≤—Ç": "terapevt",
    "–ö–∞—Ä–¥–∏–æ–ª–æ–≥": "kardiolog",
    "–õ–û–†": "otorinolaringolog",
    "–ù–µ–≤—Ä–æ–ª–æ–≥": "nevrolog",
    "–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥": "dermatolog",
    "–†–µ–Ω—Ç–≥–µ–Ω–æ–ª–æ–≥": "rentgenolog",
    "–ü—É–ª—å–º–æ–Ω–æ–ª–æ–≥": "pulmonolog",
    "–ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥": "nutriciolog",
    "–¢—Ä–∞–≤–º–∞—Ç–æ–ª–æ–≥": "travmatolog",
    "–ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç": "psihoterapevt",
    "–û—Ä—Ç–æ–ø–µ–¥": "ortoped",
    "–ú–∞—Å—Å–∞–∂–∏—Å—Ç": "massazhist",
    "–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥": "kosmetolog",
    "–û–Ω–∫–æ–ª–æ–≥": "onkolog",
    "–ù–∞—Ä–∫–æ–ª–æ–≥": "narkolog",
    "–ü–µ–¥–∏–∞—Ç—Ä": "pediatr",
    "–ü—Å–∏—Ö–æ–ª–æ–≥": "psiholog",
    "–§–ª–µ–±–æ–ª–æ–≥": "flebolog",
    "–§—Ç–∏–∑–∏–∞—Ç—Ä": "ftiziatr",
    "–≠–Ω–¥–æ—Å–∫–æ–ø–∏—Å—Ç": "endoskopist"
}

def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    for spec in SPECIALIZATIONS.keys():
        builder.add(KeyboardButton(text=spec))
    builder.add(KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_start_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üîµ –ù–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"))
    builder.add(KeyboardButton(text="üî¥ –û–ø–∏—Å–∞—Ç—å —Å–∏–º–ø—Ç–æ–º—ã"))
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

def get_back_to_menu_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return builder.as_markup(resize_keyboard=True)

def load_cache():
    if os.path.exists(CACHE_FILE):
        try:
            with open(CACHE_FILE, "r", encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞: {e}")
            return {}
    return {}

def save_cache(cache):
    with open(CACHE_FILE, "w", encoding='utf-8') as f:
        json.dump(cache, f, ensure_ascii=False, indent=2)

async def get_cached_doctors(spec_slug):
    cache = load_cache()
    if spec_slug in cache:
        cached_time = datetime.fromisoformat(cache[spec_slug]["time"])
        if datetime.now() - cached_time < timedelta(hours=CACHE_EXPIRE_HOURS):
            return cache[spec_slug]["data"]
    return None

def clean_phone(phone_text):
    if not phone_text or not isinstance(phone_text, str):
        return None
    cleaned = re.sub(r'[^0-9+]', '', phone_text)
    return cleaned if cleaned else None

async def update_progress(progress_msg, percent):
    try:
        await progress_msg.edit_text(f"üîç –ü–æ–∏—Å–∫ –≤—Ä–∞—á–µ–π... {percent}%")
    except Exception:
        pass

async def ask_yandex_gpt(symptoms: str):
    """–ó–∞–ø—Ä–æ—Å –∫ YandexGPT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤"""
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    prompt = f"""
–¢—ã –æ–ø—ã—Ç–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∏–º–ø—Ç–æ–º—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞:
{", ".join(SPECIALIZATIONS.keys())}

–í–û–ó–ú–û–ñ–ù–´–ï –°–ü–ï–¶–ò–ê–õ–ò–°–¢–´ –î–õ–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
- –ü—Ä–∏ –≥–æ–ª–æ–≤–Ω–æ–π –±–æ–ª–∏, –≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–∏, –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ø–∞–º—è—Ç—å—é ‚Üí –ù–µ–≤—Ä–æ–ª–æ–≥
- –ü—Ä–∏ –±–æ–ª–∏ –≤ —Å–µ—Ä–¥—Ü–µ, –¥–∞–≤–ª–µ–Ω–∏–∏, –∞—Ä–∏—Ç–º–∏–∏ ‚Üí –ö–∞—Ä–¥–∏–æ–ª–æ–≥  
- –ü—Ä–∏ –∫–∞—à–ª–µ, –æ–¥—ã—à–∫–µ, –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –¥—ã—Ö–∞–Ω–∏–µ–º ‚Üí –ü—É–ª—å–º–æ–Ω–æ–ª–æ–≥
- –ü—Ä–∏ –±–æ–ª–∏ –≤ –∂–∏–≤–æ—Ç–µ, —Ç–æ—à–Ω–æ—Ç–µ, –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ñ–ö–¢ ‚Üí –ì–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥ –∏–ª–∏ –¢–µ—Ä–∞–ø–µ–≤—Ç
- –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –∫–æ–∂–µ–π, —Å—ã–ø–∏, –∑—É–¥–µ ‚Üí –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥
- –ü—Ä–∏ –±–æ–ª–∏ –≤ —Å—É—Å—Ç–∞–≤–∞—Ö, –º—ã—à—Ü–∞—Ö, —Ç—Ä–∞–≤–º–∞—Ö ‚Üí –¢—Ä–∞–≤–º–∞—Ç–æ–ª–æ–≥ –∏–ª–∏ –û—Ä—Ç–æ–ø–µ–¥
- –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å–æ –∑—Ä–µ–Ω–∏–µ–º ‚Üí –û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥
- –ü—Ä–∏ –∂–µ–Ω—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö ‚Üí –ì–∏–Ω–µ–∫–æ–ª–æ–≥
- –ü—Ä–∏ –º—É–∂—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö ‚Üí –£—Ä–æ–ª–æ–≥
- –ü—Ä–∏ –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö ‚Üí –≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥
- –ü—Ä–∏ –æ–±—â–∏—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, —Å–ª–∞–±–æ—Å—Ç—å) ‚Üí –¢–µ—Ä–∞–ø–µ–≤—Ç

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –¢–û–ß–ù–û –¢–ê–ö–ò–ú:
–î–∏–∞–≥–Ω–æ–∑: [–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è]. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã: [–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç1], [–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç2]

–°–∏–º–ø—Ç–æ–º—ã: {symptoms}
"""
    
    payload = {
        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt/latest",
        "completionOptions": {"stream": False, "temperature": 0.7, "maxTokens": 500},
        "messages": [{"role": "user", "text": prompt}]
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=payload, timeout=30) as resp:
                if resp.status != 200:
                    error_text = await resp.text()
                    logger.error(f"–û—à–∏–±–∫–∞ YandexGPT (status {resp.status}): {error_text}")
                    return "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
                
                data = await resp.json()
                return data["result"]["alternatives"][0]["message"]["text"]
                
    except asyncio.TimeoutError:
        logger.error("–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT")
        return "–û—à–∏–±–∫–∞: –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–µ–∫–ª–æ."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ YandexGPT: {e}")
        return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞."

async def scrape_doctors(specialization_slug, chat_id, max_count=MAX_DOCTORS):
    base_url = "https://prodoctorov.ru"
    url = f"{base_url}/domodedovo/{specialization_slug}/"
    doctors = []
    progress_msg = None

    try:
        progress_msg = await bot.send_message(chat_id, "üîç –ü–æ–∏—Å–∫ –≤—Ä–∞—á–µ–π... 0%")
        await update_progress(progress_msg, 10)

        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
        }

        await update_progress(progress_msg, 20)

        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(url, headers=headers, timeout=30) as response:
                    if response.status != 200:
                        await update_progress(progress_msg, 100)
                        await progress_msg.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤—Ä–∞—á–∞–º–∏")
                        return []

                    html = await response.text()
                    await update_progress(progress_msg, 40)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: {e}")
                await update_progress(progress_msg, 100)
                await progress_msg.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                return []

        await update_progress(progress_msg, 60)

        soup = BeautifulSoup(html, 'html.parser')
        await update_progress(progress_msg, 70)
        
        cards = soup.select('div.b-doctor-card')
        
        if not cards:
            await update_progress(progress_msg, 100)
            await progress_msg.edit_text("üòï –í—Ä–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return []

        await update_progress(progress_msg, 80)

        for i, card in enumerate(cards[:max_count]):
            try:
                progress = 80 + int((i + 1) / min(len(cards), max_count) * 15)
                await update_progress(progress_msg, progress)
                await asyncio.sleep(0.1)

                name_elem = card.select_one('span.b-doctor-card__name-surname')
                name = name_elem.get_text(strip=True) if name_elem else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

                # –ù–ê–•–û–î–ò–ú –°–°–´–õ–ö–£ –ù–ê –í–†–ê–ß–ê - –ü–†–ê–í–ò–õ–¨–ù–´–ô –°–ï–õ–ï–ö–¢–û–†
                doctor_link = None
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å—Å—ã–ª–∫–∏
                link_selectors = [
                    'a.b-doctor-card__name',
                    'a[href*="/doctor/"]',
                    'a.b-doctor-card__link',
                    'a.b-profile-card__name'
                ]
                
                for selector in link_selectors:
                    link_elem = card.select_one(selector)
                    if link_elem and link_elem.get('href'):
                        href = link_elem['href']
                        if href.startswith('/'):
                            doctor_link = base_url + href
                        elif href.startswith('http'):
                            doctor_link = href
                        break
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Å—ã–ª–∫—É, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—É—é —Å—Å—ã–ª–∫—É –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
                if not doctor_link:
                    any_link = card.select_one('a[href]')
                    if any_link and any_link.get('href'):
                        href = any_link['href']
                        if href.startswith('/'):
                            doctor_link = base_url + href
                        elif href.startswith('http'):
                            doctor_link = href

                rating_elem = card.select_one('div.b-stars-rate__progress')
                rating = "0.0"
                if rating_elem and rating_elem.get('style'):
                    try:
                        width_str = rating_elem['style'].replace('width:', '').replace('em', '').strip()
                        rating = f"{round(float(width_str) / 1.28, 1)}"
                    except:
                        pass

                photo_elem = card.select_one('img.b-profile-card__img')
                photo = None
                if photo_elem and photo_elem.get('src'):
                    photo_url = photo_elem['src']
                    photo = photo_url if photo_url.startswith('http') else base_url + photo_url

                experience_elem = card.select_one('div.b-doctor-card__experience .ui-text_subtitle-1')
                experience = experience_elem.get_text(strip=True) if experience_elem else "–ù–µ —É–∫–∞–∑–∞–Ω"

                clinic = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                address = "–ù–µ —É–∫–∞–∑–∞–Ω"
                clinic_container = card.select_one('div.b-doctor-card__lpu-select')
                if clinic_container:
                    clinic_elem = clinic_container.select_one('span.b-select__trigger-main-text')
                    address_elem = clinic_container.select_one('span.b-select__trigger-adit-text')
                    clinic = clinic_elem.get_text(strip=True) if clinic_elem else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                    address = address_elem.get_text(strip=True) if address_elem else "–ù–µ —É–∫–∞–∑–∞–Ω"

                price = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                price_elems = [
                    '.b-doctor-card__price .ui-text_subtitle-1',
                    '.b-doctor-card__tabs-wrapper_club fieldset .ui-text_subtitle-1',
                ]
                for selector in price_elems:
                    price_elem = card.select_one(selector)
                    if price_elem and price_elem.get_text(strip=True):
                        price = price_elem.get_text(strip=True).replace(u'\xa0', ' ')
                        break

                phone = "–ù–µ —É–∫–∞–∑–∞–Ω"
                phone_clean = None
                phone_elems = [
                    '.b-doctor-card__lpu-phone-container .b-doctor-card__lpu-phone',
                    '.b-doctor-card__phone .ui-text_subtitle-1',
                ]
                for selector in phone_elems:
                    phone_elem = card.select_one(selector)
                    if phone_elem and phone_elem.get_text(strip=True):
                        phone = phone_elem.get_text(strip=True)
                        phone_clean = clean_phone(phone)
                        break

                doctors.append({
                    'name': name,
                    'link': doctor_link,  # –î–û–ë–ê–í–õ–Ø–ï–ú –°–°–´–õ–ö–£
                    'rating': rating,
                    'photo': photo,
                    'experience': experience,
                    'clinic': clinic,
                    'address': address,
                    'price': price,
                    'phone': phone,
                    'phone_clean': phone_clean
                })

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ {i}: {e}")
                continue

        await update_progress(progress_msg, 95)
        doctors.sort(key=lambda x: float(x['rating']), reverse=True)
        await update_progress(progress_msg, 100)
        await asyncio.sleep(1)
        
        if progress_msg:
            await progress_msg.delete()

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(doctors)} –≤—Ä–∞—á–µ–π –¥–ª—è {specialization_slug}")
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        for i, doc in enumerate(doctors):
            logger.info(f"–í—Ä–∞—á {i+1}: {doc['name']}, —Å—Å—ã–ª–∫–∞: {doc.get('link', '–ù–µ—Ç —Å—Å—ã–ª–∫–∏')}")
        
        return doctors

    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        if progress_msg:
            try:
                await progress_msg.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤—Ä–∞—á–µ–π")
            except:
                pass
        return []

# ------------------ FSM ------------------
class Form(StatesGroup):
    waiting_for_symptoms = State()
    waiting_for_choice = State()
    waiting_for_specialist_choice = State()

# ------------------ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ------------------
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
@dp.message(F.text.in_(SPECIALIZATIONS.keys()))
async def handle_doctor_choice(message: types.Message, state: FSMContext):
    logger.info(f"–í—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞: {message.text}")
    spec_name = message.text
    spec_slug = SPECIALIZATIONS[spec_name]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    current_state = await state.get_state()
    if current_state == Form.waiting_for_specialist_choice:
        user_data = await state.get_data()
        recommended_keyboard = user_data.get('recommended_keyboard')
        await send_doctors_list(message, spec_slug, spec_name, keyboard_to_keep=recommended_keyboard)
    else:
        await state.clear()
        await send_doctors_list(message, spec_slug, spec_name, keyboard_to_keep=get_back_to_menu_keyboard())

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    caption = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–ú–µ–¥–ì–∏–¥ ‚Äì –î–æ–º–æ–¥–µ–¥–æ–≤–æ!</b> ü©∫\n\n"
        "–ß—Ç–æ —è —É–º–µ—é:\n"
        "üîπ –ù–∞–π–¥—É –ª—É—á—à–∏—Ö –≤—Ä–∞—á–µ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É\n"
        "üîπ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∏–º–ø—Ç–æ–º—ã –∏ –ø–æ–¥—Å–∫–∞–∂—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤\n"
        "üîπ –ü–æ–∫–∞–∂—É –∫–ª–∏–Ω–∏–∫–∏, –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Ü–µ–Ω—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ —É–¥–æ–±–Ω–µ–µ –Ω–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ üëá"
    )
    try:
        with open("start.jpg", "rb") as img:
            await bot.send_photo(message.chat.id, photo=img, caption=caption, parse_mode="HTML", reply_markup=get_start_keyboard())
    except Exception:
        await message.answer(caption, parse_mode="HTML", reply_markup=get_start_keyboard())
    await state.set_state(Form.waiting_for_choice)

@dp.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def handle_main_menu(message: types.Message, state: FSMContext):
    await cmd_start(message, state)

@dp.message(Form.waiting_for_choice, F.text == "üîµ –ù–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞")
async def handle_find_specialist_choice(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=get_main_keyboard())

@dp.message(Form.waiting_for_choice, F.text == "üî¥ –û–ø–∏—Å–∞—Ç—å —Å–∏–º–ø—Ç–æ–º—ã")
async def handle_describe_symptoms_choice(message: types.Message, state: FSMContext):
    await state.set_state(Form.waiting_for_symptoms)
    await message.answer("‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç:", reply_markup=get_back_to_menu_keyboard())

@dp.message(Form.waiting_for_symptoms)
async def handle_symptoms(message: types.Message, state: FSMContext):
    symptoms = message.text.strip()
    if not symptoms:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Å–∏–º–ø—Ç–æ–º—ã.")
        return
        
    await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∏–º–ø—Ç–æ–º—ã...")
    yandex_response = await ask_yandex_gpt(symptoms)
    log_interaction(message.from_user, symptoms, yandex_response)

    if yandex_response.startswith("–û—à–∏–±–∫–∞"):
        await message.answer(yandex_response, reply_markup=get_back_to_menu_keyboard())
        await state.clear()
        return

    # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç YandexGPT
    diagnosis = "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
    specialists = ["–¢–µ—Ä–∞–ø–µ–≤—Ç"]  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    try:
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –≤ –æ—Ç–≤–µ—Ç–µ
        if "–î–∏–∞–≥–Ω–æ–∑:" in yandex_response and "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã:" in yandex_response:
            parts = yandex_response.split("–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã:")
            if len(parts) >= 2:
                diagnosis_part = parts[0].replace("–î–∏–∞–≥–Ω–æ–∑:", "").strip()
                specialists_part = parts[1].strip()
                
                diagnosis = diagnosis_part.split(".")[0] if diagnosis_part else "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
                specialists = []
                for spec in SPECIALIZATIONS.keys():
                    if spec.lower() in specialists_part.lower():
                        specialists.append(spec)
                
                if not specialists:
                    specialists = ["–¢–µ—Ä–∞–ø–µ–≤—Ç"]
        else:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            for spec in SPECIALIZATIONS.keys():
                if spec.lower() in yandex_response.lower():
                    specialists.append(spec)
            
            if len(specialists) > 2:
                specialists = specialists[:2]
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ YandexGPT: {e}")
        specialists = ["–¢–µ—Ä–∞–ø–µ–≤—Ç"]

    recommended_kb = ReplyKeyboardBuilder()
    for spec_name in specialists:
        recommended_kb.add(KeyboardButton(text=spec_name))
    recommended_kb.add(KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    recommended_kb.adjust(2)

    await state.update_data(recommended_keyboard=recommended_kb.as_markup(resize_keyboard=True))
    await message.answer(
        f"<b>–í–æ–∑–º–æ–∂–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑:</b> {diagnosis}\n\n"
        f"<b>–†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫:</b> {', '.join(specialists)}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π.",
        parse_mode="HTML",
        reply_markup=recommended_kb.as_markup(resize_keyboard=True)
    )
    await state.set_state(Form.waiting_for_specialist_choice)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@dp.message()
async def handle_unknown_message(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", reply_markup=get_start_keyboard())

async def send_doctors_list(message, spec_slug, spec_name, keyboard_to_keep=None):
    doctors = await get_cached_doctors(spec_slug)
    from_cache = True
    
    if not doctors:
        from_cache = False
        doctors = await scrape_doctors(spec_slug, message.chat.id)

    if not doctors:
        await message.answer(f"üòï –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Ä–∞—á–µ–π '{spec_name}'.", reply_markup=get_back_to_menu_keyboard())
        return

    if not from_cache and doctors:
        cache = load_cache()
        cache[spec_slug] = {
            "time": datetime.now().isoformat(),
            "data": doctors
        }
        save_cache(cache)

    await message.answer(f"‚≠ê <b>–í—Ä–∞—á–∏ {spec_name}</b>", parse_mode="HTML")

    for idx, doc in enumerate(doctors, 1):
        if doc.get('phone_clean'):
            phone_text = f'<a href="tel:{doc["phone_clean"]}">{doc["phone"]}</a>'
        else:
            phone_text = doc['phone']

        # –°–æ–∑–¥–∞–µ–º Web App –∫–Ω–æ–ø–∫—É –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–π URL –∫–Ω–æ–ø–∫–∏
keyboard = None
if doc.get('link'):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üìã –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –≤—Ä–∞—á–∞", 
            web_app=types.WebAppInfo(url=doc['link'])
        )]
    ])
    logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º Web App –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—Ä–∞—á–∞ {doc['name']}: {doc['link']}")
else:
    logger.warning(f"–ù–µ—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Ä–∞—á–∞ {doc['name']}")

        caption = (
            f"<b>{idx}. {doc['name']}</b> (‚≠ê {doc['rating']})\n"
            f"üìÖ –°—Ç–∞–∂: {doc['experience']}\n"
            f"üè• –ö–ª–∏–Ω–∏–∫–∞: {doc['clinic']}\n"
            f"üìç –ê–¥—Ä–µ—Å: {doc['address']}\n"
            f"üí∞ –ü—Ä–∏—ë–º: {doc['price']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_text}"
        )

        try:
            if doc.get('photo'):
                await bot.send_photo(
                    message.chat.id, 
                    photo=doc['photo'], 
                    caption=caption, 
                    parse_mode="HTML",
                    reply_markup=keyboard  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                )
            else:
                await bot.send_message(
                    message.chat.id, 
                    text=caption, 
                    parse_mode="HTML",
                    reply_markup=keyboard  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            plain_text = (
                f"{idx}. {doc['name']} (‚≠ê {doc['rating']})\n"
                f"–°—Ç–∞–∂: {doc['experience']}\n"
                f"–ö–ª–∏–Ω–∏–∫–∞: {doc['clinic']}\n"
                f"–ê–¥—Ä–µ—Å: {doc['address']}\n"
                f"–ü—Ä–∏—ë–º: {doc['price']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {doc['phone']}"
            )
            await bot.send_message(
                message.chat.id, 
                text=plain_text,
                reply_markup=keyboard  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )

    if keyboard_to_keep:
        await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –≤—Ä–∞—á–∞' –ø–æ–¥ –∫–∞–∂–¥—ã–º –≤—Ä–∞—á–æ–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.", reply_markup=keyboard_to_keep)
    else:
        await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –≤—Ä–∞—á–∞' –ø–æ–¥ –∫–∞–∂–¥—ã–º –≤—Ä–∞—á–æ–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.", reply_markup=get_back_to_menu_keyboard())

# ------------------ –ó–ê–ü–£–°–ö ------------------
async def main():
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
