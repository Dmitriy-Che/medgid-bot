import asyncio
import json
import os
import re
from datetime import datetime, timedelta
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from playwright.async_api import async_playwright
from bs4 import BeautifulSoup
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# ------------------ –ó–ê–ì–†–£–ó–ö–ê .ENV ------------------
load_dotenv()

# ------------------ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ù–ê–°–¢–†–û–ô–ö–ò ------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
CACHE_FILE = "doctors_cache.json"
CACHE_EXPIRE_HOURS = 3
MAX_DOCTORS = 5
LOG_FILE = "logs.txt"

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ .env")
if not YANDEX_FOLDER_ID:
    raise ValueError("‚ùå YANDEX_FOLDER_ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ .env")
if not YANDEX_API_KEY:
    raise ValueError("‚ùå YANDEX_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ .env")

# ------------------ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def log_interaction(user: types.User, user_input: str, bot_response: str):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ñ–∞–π–ª"""
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] "
                f"{user.full_name} (id={user.id})\n"
                f"  ‚û§ –ó–∞–ø—Ä–æ—Å: {user_input}\n"
                f"  ‚û§ –û—Ç–≤–µ—Ç: {bot_response}\n\n")

# ------------------ –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ò –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò ------------------
SPECIALIZATIONS = {
    "–ì–∏–Ω–µ–∫–æ–ª–æ–≥": "ginekolog",
    "–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥": "oftalmolog",
    "–í—Ä–∞—á –£–ó–ò": "ultrazvukovoy-diagnost",
    "–ú–∞–º–º–æ–ª–æ–≥": "mammolog",
    "–£—Ä–æ–ª–æ–≥": "urolog",
    "–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥": "endokrinolog",
    "–¢–µ—Ä–∞–ø–µ–≤—Ç": "terapevt",
    "–ö–∞—Ä–¥–∏–æ–ª–æ–≥": "kardiolog",
    "–õ–û–†": "otorinolaringolog",
    "–ù–µ–≤—Ä–æ–ª–æ–≥": "nevrolog",
    "–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥": "dermatolog",
    "–†–µ–Ω—Ç–≥–µ–Ω–æ–ª–æ–≥": "rentgenolog",
    "–ü—É–ª—å–º–æ–Ω–æ–ª–æ–≥": "pulmonolog",
    "–ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥": "nutriciolog",
    "–¢—Ä–∞–≤–º–∞—Ç–æ–ª–æ–≥": "travmatolog",
    "–ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç": "psihoterapevt",
    "–û—Ä—Ç–æ–ø–µ–¥": "ortoped",
    "–ú–∞—Å—Å–∞–∂–∏—Å—Ç": "massazhist",
    "–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥": "kosmetolog",
    "–û–Ω–∫–æ–ª–æ–≥": "onkolog",
    "–ù–∞—Ä–∫–æ–ª–æ–≥": "narkolog",
    "–ü–µ–¥–∏–∞—Ç—Ä": "pediatr",
    "–ü—Å–∏—Ö–æ–ª–æ–≥": "psiholog",
    "–§–ª–µ–±–æ–ª–æ–≥": "flebolog",
    "–§—Ç–∏–∑–∏–∞—Ç—Ä": "ftiziatr",
    "–≠–Ω–¥–æ—Å–∫–æ–ø–∏—Å—Ç": "endoskopist"
}

def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    for spec in SPECIALIZATIONS.keys():
        builder.add(KeyboardButton(text=spec))
    builder.add(KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_start_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üîµ –ù–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"))
    builder.add(KeyboardButton(text="üî¥ –û–ø–∏—Å–∞—Ç—å —Å–∏–º–ø—Ç–æ–º—ã"))
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

def get_back_to_menu_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return builder.as_markup(resize_keyboard=True)

def load_cache():
    if os.path.exists(CACHE_FILE):
        try:
            with open(CACHE_FILE, "r", encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞: {e}")
            return {}
    return {}

def save_cache(cache):
    with open(CACHE_FILE, "w", encoding='utf-8') as f:
        json.dump(cache, f, ensure_ascii=False, indent=2)

async def get_cached_doctors(spec_slug):
    cache = load_cache()
    if spec_slug in cache:
        cached_time = datetime.fromisoformat(cache[spec_slug]["time"])
        if datetime.now() - cached_time < timedelta(hours=CACHE_EXPIRE_HOURS):
            return cache[spec_slug]["data"]
    return None

def clean_phone(phone_text):
    if not phone_text or not isinstance(phone_text, str):
        return None
    cleaned = re.sub(r'[^0-9+]', '', phone_text)
    return cleaned if cleaned else None

async def update_progress(progress_msg, percent):
    try:
        await progress_msg.edit_text(f"üîç –ü–æ–∏—Å–∫ –≤—Ä–∞—á–µ–π... {percent}%")
    except Exception:
        pass

async def ask_yandex_gpt(symptoms: str):
    """–ó–∞–ø—Ä–æ—Å –∫ YandexGPT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤"""
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }
    prompt = f"""
–¢—ã –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –ü–æ –æ–ø–∏—Å–∞–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–µ–¥–ª–æ–∂–∏ 1-3 —Å–∞–º—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö:
{", ".join(SPECIALIZATIONS.keys())}.
–¢–∞–∫–∂–µ –ø—Ä–µ–¥–ª–æ–∂–∏ –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑.
"""
    payload = {
        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt/latest",
        "completionOptions": {"stream": False, "temperature": 0.3, "maxTokens": 500},
        "messages": [{"role": "user", "text": prompt + "\n\n" + symptoms}]
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=payload) as resp:
                if resp.status != 200:
                    return "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
                data = await resp.json()
                return data["result"]["alternatives"][0]["message"]["text"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ YandexGPT: {e}")
        return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞."

async def scrape_with_playwright(specialization_slug, chat_id, max_count=MAX_DOCTORS):
    base_url = "https://prodoctorov.ru"
    url = f"{base_url}/domodedovo/{specialization_slug}/"
    doctors = []
    progress_msg = None
    browser = None
    context = None
    page = None

    try:
        progress_msg = await bot.send_message(chat_id, "üîç –ü–æ–∏—Å–∫ –≤—Ä–∞—á–µ–π... 0%")
        
        playwright = await async_playwright().start()
        await update_progress(progress_msg, 10)
        
        browser = await playwright.chromium.launch(
            headless=True,
            args=[
                "--no-sandbox",
                "--disable-setuid-sandbox",
                "--disable-dev-shm-usage",
                "--disable-gpu",
                "--single-process"
            ]
        )
        await update_progress(progress_msg, 20)
        
        context = await browser.new_context(
            user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
            viewport={'width': 1920, 'height': 1080},
            java_script_enabled=True
        )
        await update_progress(progress_msg, 30)
        
        page = await context.new_page()
        await update_progress(progress_msg, 40)
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ—Å—É—Ä—Å—ã
        await page.route("**/*.{png,jpg,jpeg,webp,gif,svg}", lambda route: route.abort())
        await page.route("**/*.css", lambda route: route.abort())
        
        await update_progress(progress_msg, 50)
        await page.goto(url, timeout=60000, wait_until="domcontentloaded")
        await update_progress(progress_msg, 60)
        
        try:
            await page.wait_for_selector("div.b-doctor-card", timeout=15000)
            await update_progress(progress_msg, 70)
        except Exception as e:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏ –≤—Ä–∞—á–µ–π: {e}")
            await update_progress(progress_msg, 100)
            await progress_msg.delete()
            return []
        
        content = await page.content()
        await update_progress(progress_msg, 80)
        
        soup = BeautifulSoup(content, "html.parser")
        cards = soup.select("div.b-doctor-card")[:max_count]
        
        if not cards:
            logger.warning("–ö–∞—Ä—Ç–æ—á–∫–∏ –≤—Ä–∞—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await update_progress(progress_msg, 100)
            await progress_msg.delete()
            return []

        for i, card in enumerate(cards):
            try:
                progress = 80 + int((i + 1) / len(cards) * 15)
                await update_progress(progress_msg, progress)
                
                name = card.select_one("span.b-doctor-card__name-surname")
                rating_el = card.select_one("div.b-stars-rate__progress")
                rating = "0.0"
                if rating_el and 'style' in rating_el.attrs:
                    try:
                        width_str = rating_el['style'].replace('width:', '').replace('em', '').strip()
                        rating = f"{round(float(width_str) / 1.28, 1)}"
                    except:
                        pass
                
                photo = card.select_one("img.b-profile-card__img")
                experience = card.select_one("div.b-doctor-card__experience .ui-text_subtitle-1")
                
                clinic = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                address = "–ù–µ —É–∫–∞–∑–∞–Ω"
                clinic_container = card.select_one("div.b-doctor-card__lpu-select")
                if clinic_container:
                    clinic_el = clinic_container.select_one("span.b-select__trigger-main-text")
                    address_el = clinic_container.select_one("span.b-select__trigger-adit-text")
                    if clinic_el:
                        clinic = clinic_el.get_text(strip=True)
                    if address_el:
                        address = address_el.get_text(strip=True)
                
                price = card.select_one(".b-doctor-card__price .ui-text_subtitle-1") or \
                        card.select_one(".b-doctor-card__tabs-wrapper_club fieldset .ui-text_subtitle-1")
                
                phone = card.select_one(".b-doctor-card__lpu-phone-container .b-doctor-card__lpu-phone") or \
                       card.select_one(".b-doctor-card__phone .ui-text_subtitle-1")
                
                phone_text = phone.get_text(strip=True) if phone else "–ù–µ —É–∫–∞–∑–∞–Ω"
                phone_clean = clean_phone(phone_text)

                doctor_data = {
                    "name": name.get_text(strip=True) if name else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                    "rating": rating,
                    "photo": base_url + photo["src"] if photo and photo.has_attr("src") else None,
                    "experience": experience.get_text(strip=True) if experience else "–ù–µ —É–∫–∞–∑–∞–Ω",
                    "clinic": clinic,
                    "address": address,
                    "price": price.get_text(strip=True).replace(u'\xa0', ' ') if price else "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                    "phone": phone_text,
                    "phone_clean": phone_clean
                }
                doctors.append(doctor_data)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
                continue

        doctors.sort(key=lambda x: float(x['rating']), reverse=True)
        await update_progress(progress_msg, 100)
        await asyncio.sleep(1)
        if progress_msg:
            await progress_msg.delete()
        
        return doctors
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        if progress_msg:
            try:
                await progress_msg.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤—Ä–∞—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except:
                pass
        return []
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        try:
            if page:
                await page.close()
        except:
            pass
        try:
            if context:
                await context.close()
        except:
            pass
        try:
            if browser:
                await browser.close()
        except:
            pass
        try:
            if 'playwright' in locals():
                await playwright.stop()
        except:
            pass

# ------------------ FSM ------------------
class Form(StatesGroup):
    waiting_for_symptoms = State()
    waiting_for_choice = State()
    waiting_for_specialist_choice = State()

# ------------------ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ------------------
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

@dp.message(F.text.in_(SPECIALIZATIONS.keys()), StateFilter(Form.waiting_for_specialist_choice))
async def handle_recommended_doctor_choice(message: types.Message, state: FSMContext):
    spec_name = message.text
    spec_slug = SPECIALIZATIONS[spec_name]
    user_data = await state.get_data()
    recommended_keyboard = user_data.get('recommended_keyboard')
    await send_doctors_list(message, spec_slug, spec_name, keyboard_to_keep=recommended_keyboard)

@dp.message(F.text.in_(SPECIALIZATIONS.keys()), StateFilter(None))
async def handle_direct_doctor_choice(message: types.Message, state: FSMContext):
    await state.clear()
    spec_name = message.text
    spec_slug = SPECIALIZATIONS[spec_name]
    await send_doctors_list(message, spec_slug, spec_name, keyboard_to_keep=get_back_to_menu_keyboard())

@dp.message(Command("start"))
@dp.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    caption = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–ú–µ–¥–ì–∏–¥ ‚Äì –î–æ–º–æ–¥–µ–¥–æ–≤–æ!</b> ü©∫\n\n"
        "–ß—Ç–æ —è —É–º–µ—é:\n"
        "üîπ –ù–∞–π–¥—É –ª—É—á—à–∏—Ö –≤—Ä–∞—á–µ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É\n"
        "üîπ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∏–º–ø—Ç–æ–º—ã –∏ –ø–æ–¥—Å–∫–∞–∂—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤\n"
        "üîπ –ü–æ–∫–∞–∂—É –∫–ª–∏–Ω–∏–∫–∏, –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Ü–µ–Ω—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ —É–¥–æ–±–Ω–µ–µ –Ω–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ üëá"
    )
    try:
        with open("start.jpg", "rb") as img:
            await bot.send_photo(message.chat.id, photo=img, caption=caption, parse_mode="HTML", reply_markup=get_start_keyboard())
    except Exception:
        await message.answer(caption, parse_mode="HTML", reply_markup=get_start_keyboard())
    await state.set_state(Form.waiting_for_choice)

@dp.message(Form.waiting_for_choice, F.text == "üîµ –ù–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞")
async def handle_find_specialist_choice(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=get_main_keyboard())

@dp.message(Form.waiting_for_choice, F.text == "üî¥ –û–ø–∏—Å–∞—Ç—å —Å–∏–º–ø—Ç–æ–º—ã")
async def handle_describe_symptoms_choice(message: types.Message, state: FSMContext):
    await state.set_state(Form.waiting_for_symptoms)
    await message.answer("‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç:", reply_markup=get_back_to_menu_keyboard())

@dp.message(Form.waiting_for_symptoms)
async def handle_symptoms(message: types.Message, state: FSMContext):
    symptoms = message.text
    await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∏–º–ø—Ç–æ–º—ã...")
    yandex_response = await ask_yandex_gpt(symptoms)
    log_interaction(message.from_user, symptoms, yandex_response)

    if yandex_response.startswith("–û—à–∏–±–∫–∞"):
        await message.answer(yandex_response, reply_markup=get_back_to_menu_keyboard())
        await state.clear()
        return

    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞
    if "—Ç–µ—Ä–∞–ø–µ–≤—Ç" in yandex_response.lower():
        specialists = ["–¢–µ—Ä–∞–ø–µ–≤—Ç"]
    elif "–Ω–µ–≤—Ä–æ–ª–æ–≥" in yandex_response.lower():
        specialists = ["–ù–µ–≤—Ä–æ–ª–æ–≥"]
    else:
        specialists = ["–¢–µ—Ä–∞–ø–µ–≤—Ç"]

    recommended_kb = ReplyKeyboardBuilder()
    for spec_name in specialists:
        recommended_kb.add(KeyboardButton(text=spec_name))
    recommended_kb.add(KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    recommended_kb.adjust(2)

    await state.update_data(recommended_keyboard=recommended_kb.as_markup(resize_keyboard=True))
    await message.answer(
        f"–†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫: {', '.join(specialists)}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π.",
        reply_markup=recommended_kb.as_markup(resize_keyboard=True)
    )
    await state.set_state(Form.waiting_for_specialist_choice)

async def send_doctors_list(message, spec_slug, spec_name, keyboard_to_keep=None):
    doctors = await get_cached_doctors(spec_slug)
    from_cache = True
    
    if not doctors:
        from_cache = False
        doctors = await scrape_with_playwright(spec_slug, message.chat.id)

    if not doctors:
        await message.answer(f"üòï –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Ä–∞—á–µ–π '{spec_name}'.", reply_markup=get_back_to_menu_keyboard())
        return

    if not from_cache and doctors:
        cache = load_cache()
        cache[spec_slug] = {
            "time": datetime.now().isoformat(),
            "data": doctors
        }
        save_cache(cache)

    await message.answer(f"‚≠ê **–í—Ä–∞—á–∏ {spec_name}**", parse_mode="Markdown")

    for idx, doc in enumerate(doctors, 1):
        if doc.get('phone_clean'):
            phone_text = f'<a href="tel:{doc["phone_clean"]}">{doc["phone"]}</a>'
        else:
            phone_text = doc['phone']

        caption = (
            f"<b>{idx}. {doc['name']}</b> (‚≠ê {doc['rating']})\n"
            f"üìÖ –°—Ç–∞–∂: {doc['experience']}\n"
            f"üè• –ö–ª–∏–Ω–∏–∫–∞: {doc['clinic']}\n"
            f"üìç –ê–¥—Ä–µ—Å: {doc['address']}\n"
            f"üí∞ –ü—Ä–∏—ë–º: {doc['price']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_text}"
        )

        try:
            if doc.get('photo'):
                await bot.send_photo(message.chat.id, photo=doc['photo'], caption=caption, parse_mode="HTML")
            else:
                await bot.send_message(message.chat.id, text=caption, parse_mode="HTML")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            plain_text = (
                f"{idx}. {doc['name']} (‚≠ê {doc['rating']})\n"
                f"–°—Ç–∞–∂: {doc['experience']}\n"
                f"–ö–ª–∏–Ω–∏–∫–∞: {doc['clinic']}\n"
                f"–ê–¥—Ä–µ—Å: {doc['address']}\n"
                f"–ü—Ä–∏—ë–º: {doc['price']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {doc['phone']}"
            )
            await bot.send_message(message.chat.id, text=plain_text)

    if keyboard_to_keep:
        await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ!", reply_markup=keyboard_to_keep)
    else:
        await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ!")

# ------------------ –ó–ê–ü–£–°–ö ------------------
async def main():
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
